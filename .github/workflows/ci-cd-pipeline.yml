name: CI/CD for Wisecow Application with Dockerization

on:
  push:
    branches:
      - main  # or your default branch
  pull_request:
    branches:
      - main  # or your default branch

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true
          echo "Project ID: ${{ secrets.GCP_PROJECT_ID }}"
          echo "Cluster Name: ${{ secrets.GCP_CLUSTER_NAME }}"
          echo "Compute Zone: ${{ secrets.GCP_COMPUTE_ZONE }}"
      # Step 3: Authenticate kubectl with GKE
      - name: Authenticate kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GCP_CLUSTER_NAME }} --zone ${{ secrets.GCP_COMPUTE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

      # Step 4: Build Docker image and push to Google Container Registry (GCR)
      - name: Set up Docker for GCR
        run: |
          echo ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }} | docker login -u _json_key --password-stdin https://gcr.io

      - name: Build and push Docker image to GCR
        env:
          IMAGE_TAG: gcr.io/${{ secrets.GCP_PROJECT_ID }}/wisecow-app:$GITHUB_SHA
        run: |
          # Build the Docker image
          docker build -t $IMAGE_TAG .

          # Push the image to Google Container Registry
          docker push $IMAGE_TAG

      # Step 5: Deploy to GKE using kubectl
      - name: Deploy to GKE
        env:
          IMAGE_TAG: gcr.io/${{ secrets.GCP_PROJECT_ID }}/wisecow-app:$GITHUB_SHA
        run: |
          # Update the Kubernetes deployment with the new image
          kubectl set image deployment/wisecow-deployment wisecow-container=$IMAGE_TAG --record

          # Apply Kubernetes configuration files (deployment.yaml and service.yaml)
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

      # Step 6: Check the status of the deployment (optional)
      - name: Check Deployment Status
        run: |
          kubectl get pods
          kubectl get services
